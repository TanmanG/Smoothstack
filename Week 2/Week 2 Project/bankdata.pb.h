// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bankdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bankdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bankdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bankdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bankdata_2eproto;
namespace bankdata {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class BankDB;
struct BankDBDefaultTypeInternal;
extern BankDBDefaultTypeInternal _BankDB_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace bankdata
PROTOBUF_NAMESPACE_OPEN
template<> ::bankdata::Account* Arena::CreateMaybeMessage<::bankdata::Account>(Arena*);
template<> ::bankdata::BankDB* Arena::CreateMaybeMessage<::bankdata::BankDB>(Arena*);
template<> ::bankdata::Event* Arena::CreateMaybeMessage<::bankdata::Event>(Arena*);
template<> ::bankdata::Transaction* Arena::CreateMaybeMessage<::bankdata::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bankdata {

enum Transaction_transactiontype : int {
  Transaction_transactiontype_CREDIT = 0,
  Transaction_transactiontype_DEBIT = 1
};
bool Transaction_transactiontype_IsValid(int value);
constexpr Transaction_transactiontype Transaction_transactiontype_transactiontype_MIN = Transaction_transactiontype_CREDIT;
constexpr Transaction_transactiontype Transaction_transactiontype_transactiontype_MAX = Transaction_transactiontype_DEBIT;
constexpr int Transaction_transactiontype_transactiontype_ARRAYSIZE = Transaction_transactiontype_transactiontype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_transactiontype_descriptor();
template<typename T>
inline const std::string& Transaction_transactiontype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transaction_transactiontype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transaction_transactiontype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transaction_transactiontype_descriptor(), enum_t_value);
}
inline bool Transaction_transactiontype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transaction_transactiontype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transaction_transactiontype>(
    Transaction_transactiontype_descriptor(), name, value);
}
// ===================================================================

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bankdata.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bankdata.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Transaction_transactiontype transactiontype;
  static constexpr transactiontype CREDIT =
    Transaction_transactiontype_CREDIT;
  static constexpr transactiontype DEBIT =
    Transaction_transactiontype_DEBIT;
  static inline bool transactiontype_IsValid(int value) {
    return Transaction_transactiontype_IsValid(value);
  }
  static constexpr transactiontype transactiontype_MIN =
    Transaction_transactiontype_transactiontype_MIN;
  static constexpr transactiontype transactiontype_MAX =
    Transaction_transactiontype_transactiontype_MAX;
  static constexpr int transactiontype_ARRAYSIZE =
    Transaction_transactiontype_transactiontype_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  transactiontype_descriptor() {
    return Transaction_transactiontype_descriptor();
  }
  template<typename T>
  static inline const std::string& transactiontype_Name(T enum_t_value) {
    static_assert(::std::is_same<T, transactiontype>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function transactiontype_Name.");
    return Transaction_transactiontype_Name(enum_t_value);
  }
  static inline bool transactiontype_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      transactiontype* value) {
    return Transaction_transactiontype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIDFieldNumber = 1,
    kFirstPartyIDFieldNumber = 2,
    kSecondPartyIDFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // optional int64 transactionID = 1;
  bool has_transactionid() const;
  private:
  bool _internal_has_transactionid() const;
  public:
  void clear_transactionid();
  int64_t transactionid() const;
  void set_transactionid(int64_t value);
  private:
  int64_t _internal_transactionid() const;
  void _internal_set_transactionid(int64_t value);
  public:

  // optional int32 firstPartyID = 2;
  bool has_firstpartyid() const;
  private:
  bool _internal_has_firstpartyid() const;
  public:
  void clear_firstpartyid();
  int32_t firstpartyid() const;
  void set_firstpartyid(int32_t value);
  private:
  int32_t _internal_firstpartyid() const;
  void _internal_set_firstpartyid(int32_t value);
  public:

  // optional int32 secondPartyID = 3;
  bool has_secondpartyid() const;
  private:
  bool _internal_has_secondpartyid() const;
  public:
  void clear_secondpartyid();
  int32_t secondpartyid() const;
  void set_secondpartyid(int32_t value);
  private:
  int32_t _internal_secondpartyid() const;
  void _internal_set_secondpartyid(int32_t value);
  public:

  // optional .bankdata.Transaction.transactiontype type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::bankdata::Transaction_transactiontype type() const;
  void set_type(::bankdata::Transaction_transactiontype value);
  private:
  ::bankdata::Transaction_transactiontype _internal_type() const;
  void _internal_set_type(::bankdata::Transaction_transactiontype value);
  public:

  // @@protoc_insertion_point(class_scope:bankdata.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t transactionid_;
  int32_t firstpartyid_;
  int32_t secondpartyid_;
  int type_;
  friend struct ::TableStruct_bankdata_2eproto;
};
// -------------------------------------------------------------------

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bankdata.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bankdata.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kTransactionsFieldNumber = 2,
    kAccountFieldNumber = 3,
    kNameFieldNumber = 5,
    kUsernameFieldNumber = 6,
    kPasswordFieldNumber = 7,
    kCreationDateFieldNumber = 9,
    kAccountNumberFieldNumber = 4,
    kBalanceFieldNumber = 8,
  };
  // repeated .bankdata.Event events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::bankdata::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Event >*
      mutable_events();
  private:
  const ::bankdata::Event& _internal_events(int index) const;
  ::bankdata::Event* _internal_add_events();
  public:
  const ::bankdata::Event& events(int index) const;
  ::bankdata::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Event >&
      events() const;

  // repeated .bankdata.Transaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::bankdata::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Transaction >*
      mutable_transactions();
  private:
  const ::bankdata::Transaction& _internal_transactions(int index) const;
  ::bankdata::Transaction* _internal_add_transactions();
  public:
  const ::bankdata::Transaction& transactions(int index) const;
  ::bankdata::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Transaction >&
      transactions() const;

  // optional string account = 3;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string username = 6;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string password = 7;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string creationDate = 9;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_NODISCARD std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // optional int64 accountNumber = 4;
  bool has_accountnumber() const;
  private:
  bool _internal_has_accountnumber() const;
  public:
  void clear_accountnumber();
  int64_t accountnumber() const;
  void set_accountnumber(int64_t value);
  private:
  int64_t _internal_accountnumber() const;
  void _internal_set_accountnumber(int64_t value);
  public:

  // optional double balance = 8;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // @@protoc_insertion_point(class_scope:bankdata.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Event > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  int64_t accountnumber_;
  double balance_;
  friend struct ::TableStruct_bankdata_2eproto;
};
// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bankdata.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bankdata.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // optional string date = 1;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional string details = 2;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const std::string& details() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_details(ArgT0&& arg0, ArgT... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* details);
  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // @@protoc_insertion_point(class_scope:bankdata.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  friend struct ::TableStruct_bankdata_2eproto;
};
// -------------------------------------------------------------------

class BankDB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bankdata.BankDB) */ {
 public:
  inline BankDB() : BankDB(nullptr) {}
  ~BankDB() override;
  explicit constexpr BankDB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BankDB(const BankDB& from);
  BankDB(BankDB&& from) noexcept
    : BankDB() {
    *this = ::std::move(from);
  }

  inline BankDB& operator=(const BankDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline BankDB& operator=(BankDB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BankDB& default_instance() {
    return *internal_default_instance();
  }
  static inline const BankDB* internal_default_instance() {
    return reinterpret_cast<const BankDB*>(
               &_BankDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BankDB& a, BankDB& b) {
    a.Swap(&b);
  }
  inline void Swap(BankDB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BankDB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BankDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BankDB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BankDB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BankDB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BankDB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bankdata.BankDB";
  }
  protected:
  explicit BankDB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .bankdata.Account accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::bankdata::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Account >*
      mutable_accounts();
  private:
  const ::bankdata::Account& _internal_accounts(int index) const;
  ::bankdata::Account* _internal_add_accounts();
  public:
  const ::bankdata::Account& accounts(int index) const;
  ::bankdata::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:bankdata.BankDB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bankdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// optional int64 transactionID = 1;
inline bool Transaction::_internal_has_transactionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transaction::has_transactionid() const {
  return _internal_has_transactionid();
}
inline void Transaction::clear_transactionid() {
  transactionid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Transaction::_internal_transactionid() const {
  return transactionid_;
}
inline int64_t Transaction::transactionid() const {
  // @@protoc_insertion_point(field_get:bankdata.Transaction.transactionID)
  return _internal_transactionid();
}
inline void Transaction::_internal_set_transactionid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  transactionid_ = value;
}
inline void Transaction::set_transactionid(int64_t value) {
  _internal_set_transactionid(value);
  // @@protoc_insertion_point(field_set:bankdata.Transaction.transactionID)
}

// optional int32 firstPartyID = 2;
inline bool Transaction::_internal_has_firstpartyid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transaction::has_firstpartyid() const {
  return _internal_has_firstpartyid();
}
inline void Transaction::clear_firstpartyid() {
  firstpartyid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Transaction::_internal_firstpartyid() const {
  return firstpartyid_;
}
inline int32_t Transaction::firstpartyid() const {
  // @@protoc_insertion_point(field_get:bankdata.Transaction.firstPartyID)
  return _internal_firstpartyid();
}
inline void Transaction::_internal_set_firstpartyid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  firstpartyid_ = value;
}
inline void Transaction::set_firstpartyid(int32_t value) {
  _internal_set_firstpartyid(value);
  // @@protoc_insertion_point(field_set:bankdata.Transaction.firstPartyID)
}

// optional int32 secondPartyID = 3;
inline bool Transaction::_internal_has_secondpartyid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transaction::has_secondpartyid() const {
  return _internal_has_secondpartyid();
}
inline void Transaction::clear_secondpartyid() {
  secondpartyid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Transaction::_internal_secondpartyid() const {
  return secondpartyid_;
}
inline int32_t Transaction::secondpartyid() const {
  // @@protoc_insertion_point(field_get:bankdata.Transaction.secondPartyID)
  return _internal_secondpartyid();
}
inline void Transaction::_internal_set_secondpartyid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  secondpartyid_ = value;
}
inline void Transaction::set_secondpartyid(int32_t value) {
  _internal_set_secondpartyid(value);
  // @@protoc_insertion_point(field_set:bankdata.Transaction.secondPartyID)
}

// optional .bankdata.Transaction.transactiontype type = 4;
inline bool Transaction::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Transaction::has_type() const {
  return _internal_has_type();
}
inline void Transaction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bankdata::Transaction_transactiontype Transaction::_internal_type() const {
  return static_cast< ::bankdata::Transaction_transactiontype >(type_);
}
inline ::bankdata::Transaction_transactiontype Transaction::type() const {
  // @@protoc_insertion_point(field_get:bankdata.Transaction.type)
  return _internal_type();
}
inline void Transaction::_internal_set_type(::bankdata::Transaction_transactiontype value) {
  assert(::bankdata::Transaction_transactiontype_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void Transaction::set_type(::bankdata::Transaction_transactiontype value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bankdata.Transaction.type)
}

// -------------------------------------------------------------------

// Account

// optional string account = 3;
inline bool Account::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Account::has_account() const {
  return _internal_has_account();
}
inline void Account::clear_account() {
  account_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Account::account() const {
  // @@protoc_insertion_point(field_get:bankdata.Account.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_account(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bankdata.Account.account)
}
inline std::string* Account::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:bankdata.Account.account)
  return _s;
}
inline const std::string& Account::_internal_account() const {
  return account_.Get();
}
inline void Account::_internal_set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_account() {
  // @@protoc_insertion_point(field_release:bankdata.Account.account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bankdata.Account.account)
}

// optional int64 accountNumber = 4;
inline bool Account::_internal_has_accountnumber() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Account::has_accountnumber() const {
  return _internal_has_accountnumber();
}
inline void Account::clear_accountnumber() {
  accountnumber_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t Account::_internal_accountnumber() const {
  return accountnumber_;
}
inline int64_t Account::accountnumber() const {
  // @@protoc_insertion_point(field_get:bankdata.Account.accountNumber)
  return _internal_accountnumber();
}
inline void Account::_internal_set_accountnumber(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  accountnumber_ = value;
}
inline void Account::set_accountnumber(int64_t value) {
  _internal_set_accountnumber(value);
  // @@protoc_insertion_point(field_set:bankdata.Account.accountNumber)
}

// optional string name = 5;
inline bool Account::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Account::has_name() const {
  return _internal_has_name();
}
inline void Account::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:bankdata.Account.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bankdata.Account.name)
}
inline std::string* Account::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bankdata.Account.name)
  return _s;
}
inline const std::string& Account::_internal_name() const {
  return name_.Get();
}
inline void Account::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:bankdata.Account.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bankdata.Account.name)
}

// optional string username = 6;
inline bool Account::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Account::has_username() const {
  return _internal_has_username();
}
inline void Account::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Account::username() const {
  // @@protoc_insertion_point(field_get:bankdata.Account.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bankdata.Account.username)
}
inline std::string* Account::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:bankdata.Account.username)
  return _s;
}
inline const std::string& Account::_internal_username() const {
  return username_.Get();
}
inline void Account::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000004u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_username() {
  // @@protoc_insertion_point(field_release:bankdata.Account.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bankdata.Account.username)
}

// optional string password = 7;
inline bool Account::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Account::has_password() const {
  return _internal_has_password();
}
inline void Account::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:bankdata.Account.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bankdata.Account.password)
}
inline std::string* Account::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:bankdata.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  return password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000008u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:bankdata.Account.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bankdata.Account.password)
}

// optional double balance = 8;
inline bool Account::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Account::has_balance() const {
  return _internal_has_balance();
}
inline void Account::clear_balance() {
  balance_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Account::_internal_balance() const {
  return balance_;
}
inline double Account::balance() const {
  // @@protoc_insertion_point(field_get:bankdata.Account.balance)
  return _internal_balance();
}
inline void Account::_internal_set_balance(double value) {
  _has_bits_[0] |= 0x00000040u;
  balance_ = value;
}
inline void Account::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:bankdata.Account.balance)
}

// optional string creationDate = 9;
inline bool Account::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Account::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void Account::clear_creationdate() {
  creationdate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Account::creationdate() const {
  // @@protoc_insertion_point(field_get:bankdata.Account.creationDate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_creationdate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bankdata.Account.creationDate)
}
inline std::string* Account::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:bankdata.Account.creationDate)
  return _s;
}
inline const std::string& Account::_internal_creationdate() const {
  return creationdate_.Get();
}
inline void Account::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000010u;
  return creationdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_creationdate() {
  // @@protoc_insertion_point(field_release:bankdata.Account.creationDate)
  if (!_internal_has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = creationdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creationdate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creationdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  creationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creationdate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creationdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bankdata.Account.creationDate)
}

// repeated .bankdata.Event events = 1;
inline int Account::_internal_events_size() const {
  return events_.size();
}
inline int Account::events_size() const {
  return _internal_events_size();
}
inline void Account::clear_events() {
  events_.Clear();
}
inline ::bankdata::Event* Account::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:bankdata.Account.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Event >*
Account::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:bankdata.Account.events)
  return &events_;
}
inline const ::bankdata::Event& Account::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::bankdata::Event& Account::events(int index) const {
  // @@protoc_insertion_point(field_get:bankdata.Account.events)
  return _internal_events(index);
}
inline ::bankdata::Event* Account::_internal_add_events() {
  return events_.Add();
}
inline ::bankdata::Event* Account::add_events() {
  ::bankdata::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:bankdata.Account.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Event >&
Account::events() const {
  // @@protoc_insertion_point(field_list:bankdata.Account.events)
  return events_;
}

// repeated .bankdata.Transaction transactions = 2;
inline int Account::_internal_transactions_size() const {
  return transactions_.size();
}
inline int Account::transactions_size() const {
  return _internal_transactions_size();
}
inline void Account::clear_transactions() {
  transactions_.Clear();
}
inline ::bankdata::Transaction* Account::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:bankdata.Account.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Transaction >*
Account::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:bankdata.Account.transactions)
  return &transactions_;
}
inline const ::bankdata::Transaction& Account::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::bankdata::Transaction& Account::transactions(int index) const {
  // @@protoc_insertion_point(field_get:bankdata.Account.transactions)
  return _internal_transactions(index);
}
inline ::bankdata::Transaction* Account::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::bankdata::Transaction* Account::add_transactions() {
  ::bankdata::Transaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:bankdata.Account.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Transaction >&
Account::transactions() const {
  // @@protoc_insertion_point(field_list:bankdata.Account.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// Event

// optional string date = 1;
inline bool Event::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event::has_date() const {
  return _internal_has_date();
}
inline void Event::clear_date() {
  date_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Event::date() const {
  // @@protoc_insertion_point(field_get:bankdata.Event.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_date(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bankdata.Event.date)
}
inline std::string* Event::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:bankdata.Event.date)
  return _s;
}
inline const std::string& Event::_internal_date() const {
  return date_.Get();
}
inline void Event::_internal_set_date(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000001u;
  return date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_date() {
  // @@protoc_insertion_point(field_release:bankdata.Event.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = date_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Event::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bankdata.Event.date)
}

// optional string details = 2;
inline bool Event::_internal_has_details() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event::has_details() const {
  return _internal_has_details();
}
inline void Event::clear_details() {
  details_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Event::details() const {
  // @@protoc_insertion_point(field_get:bankdata.Event.details)
  return _internal_details();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_details(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bankdata.Event.details)
}
inline std::string* Event::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:bankdata.Event.details)
  return _s;
}
inline const std::string& Event::_internal_details() const {
  return details_.Get();
}
inline void Event::_internal_set_details(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_details() {
  _has_bits_[0] |= 0x00000002u;
  return details_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_details() {
  // @@protoc_insertion_point(field_release:bankdata.Event.details)
  if (!_internal_has_details()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = details_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (details_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Event::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (details_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bankdata.Event.details)
}

// -------------------------------------------------------------------

// BankDB

// repeated .bankdata.Account accounts = 1;
inline int BankDB::_internal_accounts_size() const {
  return accounts_.size();
}
inline int BankDB::accounts_size() const {
  return _internal_accounts_size();
}
inline void BankDB::clear_accounts() {
  accounts_.Clear();
}
inline ::bankdata::Account* BankDB::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:bankdata.BankDB.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Account >*
BankDB::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:bankdata.BankDB.accounts)
  return &accounts_;
}
inline const ::bankdata::Account& BankDB::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::bankdata::Account& BankDB::accounts(int index) const {
  // @@protoc_insertion_point(field_get:bankdata.BankDB.accounts)
  return _internal_accounts(index);
}
inline ::bankdata::Account* BankDB::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::bankdata::Account* BankDB::add_accounts() {
  ::bankdata::Account* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:bankdata.BankDB.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bankdata::Account >&
BankDB::accounts() const {
  // @@protoc_insertion_point(field_list:bankdata.BankDB.accounts)
  return accounts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bankdata

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bankdata::Transaction_transactiontype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bankdata::Transaction_transactiontype>() {
  return ::bankdata::Transaction_transactiontype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bankdata_2eproto
